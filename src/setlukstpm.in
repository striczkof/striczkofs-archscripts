#!/bin/bash
(
  command -v systemd-cryptenroll
  command -v systemctl
  command -v realpath
  command -v lsblk
) 1>/dev/null || exit 2

CONFIG='CONFIG_PATH/setlukstpm.conf'
[ ! -f "${CONFIG}" ] && echo_exit 2 "Config file '${CONFIG}' does not exist!"
# shellcheck disable=SC1090
. "${CONFIG}"

# Set anything to print all output
VERBOSE=""
# List of everything done, to be outputted in case of error.
action_performed=()

main()
{
  # true to enable, false to disable, empty to do nothing
  local BOOT_SERVICE
  # Deprecated
  # 1 for full protection, 2 for secure boot PCR (7) only, 3 for firmware PCR (0) only
  local ACTIVE_PCRS_MODE

  local full_pcrs_devices=()
  local secureboot_pcrs_devices=()
  local firmware_pcrs_devices=()

  local PERMANENT_PCRS_MODE
  # Set anything to create recovery
  local RECOVERY
  # Output recovery file into this file if provided.
  local RECOVERY_FILE
  # Put anything to wipe TPM2 recovery keyslots, respectively.
  local WIPE_TPM2_KEYSLOTS
  local WIPE_RECOVERY_KEYSLOTS
  while getopts ":edabsnxrP:vh" arg
  do
    case $arg in
      e)
        if [ -z "${BOOT_SERVICE}" ]
        then
          BOOT_SERVICE=true
        else
          echo_exit 1 "Boot service mode is already set. either use '-e' or '-d' but not both!"
        fi
        ;;
      d)
        if [ -z "${BOOT_SERVICE}" ]
        then
          BOOT_SERVICE=false
        else
          echo_exit 1 "Boot service mode is already set. Either use '-e' or '-d' but not both!"
        fi
        ;;
      a)
        if [ -z "${ACTIVE_PCRS_MODE}" ]
        then
          ACTIVE_PCRS_MODE=1
        else
          echo_exit "TPM2 PCRs selection already set. Either use '-a,' '-f,' or '-s' only!"
        fi
        ;;
      b)
        if [ -z "${ACTIVE_PCRS_MODE}" ]
        then
          ACTIVE_PCRS_MODE=3
        else
          echo_exit "TPM2 PCRs selection already set. Either use '-a,' '-f,' or '-s' only!"
        fi
        ;;
      s)
        if [ -z "${ACTIVE_PCRS_MODE}" ]
        then
          ACTIVE_PCRS_MODE=2
        else
          echo_exit "TPM2 PCRs selection already set. Either use '-a,' '-f,' or '-s' only!"
        fi
        ;;
      n)
        WIPE_TPM2_KEYSLOTS=1
        ;;
      x)
        WIPE_RECOVERY_KEYSLOTS=1
        ;;
      r)
        RECOVERY=true
        ;;
      P)
        RECOVERY=true
        RECOVERY_FILE="$(realpath "${OPTARG}")" || echo_exit 2 "Recovery text file directory does not exist!"
        ;;
      v)
        VERBOSE=1
        ;;
      h)
        echo "Usage: ${0} [options]"
        echo "Options:"
        echo "  -e                          Enable post boot service and stop path service. (Incompatible with '-d')"
        echo "  -e                          Disable post boot service. (Incompatible with '-e')"
        echo "  -a                          Seal all LUKS devices found with full PCRs (${FULL_PCRS}) TPM2."
        echo "  -A <mapper1,mapper2...>     Seal selected mappers (separated by commas) with full PCRs (${FULL_PCRS}) TPM2."
        echo "  -f                          Set to use the platform firmware hash only. (Incompatible with '-a' and '-s')"
        echo "  -s                          Set to use the secure boot hash only. (Incompatible with '-a' and '-f')"
        echo "  -n                          Wipe TPM2 keyslots."
        echo "  -x                          Wipe recovery keyslots."
        echo "  -r                          Create recovery keyslots."
        echo "  -P <file>                   Create recovery keyslots and print the keys to the file."
        echo "  -h                          Show this help message."
        exit 0
        ;;
      *)
        usage 1>&2
        echo_exit 1 "Enter '$(basename "$0") -h' for help."
        ;;
    esac
  done
  # Output all actions
  if [ -n "${VERBOSE}" ]
  then
    out "Printing log output"
    [ -n "${WIPE_RECOVERY_KEYSLOTS}" ] && out "Will wipe the recovery keyslots of the LUKS partition(s)."
    [ -n "${WIPE_TPM2_KEYSLOTS}" ] && out "Will wipe the TPM2 keyslots of the LUKS partition(s)."
    case $ACTIVE_PCRS_MODE in
      1)
        out "Set to use full protection. Using PCR(s) ${FULL_PCRS} to seal the LUKS partition(s) with TPM2."
        ;;
      2)
        out "Set to use the secure boot hash only. Using PCR(s) ${SECUREBOOT_PCRS} to seal the LUKS partition(s) with TPM2."
        ;;
      3)
        out "Set to use the platform firmware hash only. Using PCR(s) ${FIRMWARE_PCRS} to seal the LUKS partition(s) with TPM2."
        ;;
    esac
    if $RECOVERY && [ -n "${RECOVERY_FILE}" ]
    then
      out "Will create recovery keyslots for the LUKS partition(s) and print the keys to '${RECOVERY_FILE}'."
    elif $RECOVERY
    then
      out "Will create recovery keyslots for the LUKS partition(s) and print the keys to the stdout."
    fi
    case $BOOT_SERVICE in
      0)
        out "Disabling post boot service."
        ;;
      1)
        out "Enabling post boot service and stopping the path watcher service."
        ;;
    esac
  fi
  [ "$(id -u)" -ne 0 ] && echo_exit 1 "You must be a root user!"
  # Preparing recovery output
  RECOVERY && local recovery_output
    # Loop through mappers
    for mapper in "${MAPPERS[@]}"
    do
      local block_device
      block_device=$(lsblk -pr -o NAME,PKNAME | grep -oP "(?<=${mapper} ).*")
      [ -z "${block_device}" ] && echo_exit 2 "Block device for the mapper ${mapper} is not found!"
      out "Block device '${block_device}' has been found for the mapper '${mapper}'."
      # shellcheck disable=SC2059
      key_file="$(printf "${KEY_FILE_PATH}" "${mapper}")"
      if [ -n "${WIPE_TPM2_KEYSLOTS}" ]
      then
        wipe_tpm2_keyslot "${block_device}" "${key_file}"
        out "Wiped/checked TPM2 keyslots."
      fi
      case $ACTIVE_PCRS_MODE in
        1)
          # Full protection
          create_tpm2_keyslot "${block_device}" "${key_file}" "${FULL_PCRS}"
          out "Enroled full TPM2 PCRs"
          ;;
        2)
          # Secure boot only
          create_tpm2_keyslot "${block_device}" "${key_file}" "${SECUREBOOT_PCRS}"
          out "Enroled secure boot TPM2 PCRs"
          ;;
        3)
          # Firmware only
          create_tpm2_keyslot "${block_device}" "${key_file}" "${FIRMWARE_PCRS}"
          out "Enroled firmware TPM2 PCRs"
          ;;
      esac
      # Wipe recovery keyslots when requested
      if [ -n "${WIPE_RECOVERY_KEYSLOTS}" ]
      then
        wipe_recovery_keyslot "${block_device}" "${key_file}"
        out "Wiped/checked recovery keyslots."
      fi
      # Create recovery keyslots when requested
      if $RECOVERY
      then
        local recovery_key
        recovery_key="$(create_recovery_keyslot "${block_device}" "${key_file}")"
        out "Enroled the recovery keyslot."
        # Writing
        if [ -t 1 ]
        then
          recovery_output="${recovery_output}\n\tPartition: ${block_device}\n\tUUID: $(lsblk -pr -o NAME,UUID | grep -oP "(?<=${block_device} ).*")\n\tRecovery key: ${recovery_key}\n"
        else
          recovery_output="${recovery_output}[${block_device}]\nmapper=${mapper}\nuuid=$(lsblk -pr -o NAME,UUID | grep -oP "(?<=${block_device} ).*")\nrecovery${recovery_key}\n\n"
        fi
      fi
    done
    if [ -z "${BOOT_SERVICE}" ] && [ -z "$PERMANENT_PCRS_MODE" ]
    then
      out "Nothing to do with the boot service."
    else
      case $BOOT_SERVICE in
        0)
          systemctl disable "${BOOT_POST_SERVICE}" 1>/dev/null 2>&1 || echo_exit 1 "Failed to disable post boot service!"
          out "Post boot service disabled."
          ;;
        1)
          systemctl enable "${BOOT_POST_SERVICE}" 1>/dev/null 2>&1 || echo_exit 1 "Failed to enable post boot service!"
          out "Post boot service enabled."
          systemctl stop "${PATH_WATCHER_SERVICE}" 1>/dev/null 2>&1 || echo_exit 1 "Failed to disable path watcher service!"
          out "Path watcher service stopped."
          ;;
      esac
    fi
    if [ -t 1 ] && $RECOVERY
    then
      out "Printing recovery keys to this terminal..."
      # Shamelessly stolen
      if [ -n "${VERBOSE}" ]
      then
        cols=$(tput cols)
        for ((i=0; i<cols; i++));do printf "="; done; echo
        echo -e "${recovery_output}"
        cols=$(tput cols)
        for ((i=0; i<cols; i++));do printf "="; done; echo
      else
        echo -ne "${recovery_output}"
      fi
    else
      echo -ne "${recovery_output}" >> "${RECOVERY_FILE}"
      out "Recovery keys printed to '${RECOVERY_FILE}'"
    fi
    return 0
}

# Argument 1 is the block device, argument 2 is the key file
wipe_tpm2_keyslot()
{
  if [ -n "${VERBOSE}" ]
  then
    systemd-cryptenroll --wipe-slot=tpm2 --unlock-key-file="$2" "$1" || echo_exit $? "Failed to wipe/check the TPM2 keyslot(s) of ${1}!"
  else
    systemd-cryptenroll --wipe-slot=tpm2 --unlock-key-file="$2" "$1" 1>/dev/null 2>&1 || echo_exit $? "Failed to wipe/check the TPM2 keyslot(s) of ${1}!"
  fi
  action_performed+=("Wiped/checked TPM2 keyslots of ${1}")
}

# Argument 1 is the block device, argument 2 is the key file, argument 4 is the PCR selection
create_tpm2_keyslot()
{
  if [ -n "${VERBOSE}" ]
  then
    systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs="$4" --unlock-key-file="$2" "$1" || echo_exit $? "Failed to enroll the TPM2 keyslot of ${1}!"
  else
    systemd-cryptenroll --tpm2-device=auto --tpm2-pcrs="$4" --unlock-key-file="$2" "$1" 1>/dev/null 2>&1 || echo_exit $? "Failed to enroll the TPM2 keyslot of ${1}!"
  fi
  action_performed+=("TPM2[${4}] keyslot has been enrolled to ${1}.")
}

# Argument 1 is the block device, argument 2 is the key file
wipe_recovery_keyslot()
{
  if [ -n "${VERBOSE}" ]
  then
    systemd-cryptenroll --wipe-slot=recovery --unlock-key-file="$2" "$1" || echo_exit $? "Failed to wipe/check the recovery keyslot(s) of ${1}!"
  else
    systemd-cryptenroll --wipe-slot=recovery --unlock-key-file="$2" "$1" 1>/dev/null 2>&1 || echo_exit $? "Failed to wipe/check the recovery keyslot(s) of ${1}!"
  fi
  action_performed+=("Wiped/checked recovery keyslots of ${1}")
}

# Argument 1 is the block device, argument 2 is the key file
create_recovery_keyslot()
{
  systemd-cryptenroll --recovery-key  --unlock-key-file="$2" "$1" 2>/dev/null || echo_exit $? "Failed to wipe/check the TPM2 keyslot(s) of ${1}!"
  action_performed+=("Recovery keyslot has been enrolled to ${1}.")
}


usage()
{
  echo "Usage: $(basename "$0") [OPTIONS]"
}

out()
{
  [ -n "${VERBOSE}" ] && echo "$1" 1>&2
}

# Argument 1 is for the exit code, argument 2 is for the printed message
echo_exit() {
  echo "$2" 1>&2
  if [ "$1" -ne 0 ] && [ -${#action_performed[@]} -gt 0 ]
  then
    echo "The following actions have been performed:"
    for action in "${action_performed[@]}"
    do
      echo -e "\t${action}"
    done
  fi
  exit "$1"
}

main "$@"
